# - For Windows Vim, Copy the .dotfiles/Vim/ directory to /vimfiles and the .dotfiles/.vimrc to .vimrc both in the users root directory.
#!/usr/bin/env bash
#
# Based on a fork of the Bootstrap script from the
# holman/dotfiles (https://github.com/holman/dotfiles)
# repo.
#
# The dotfiles script installs, sets up and configures the
# various dotfiles and components in the dotfiles parent
# directory.

dotfiles_root=`pwd`

set -e

echo ''

info () {
  printf "    [ \033[00;34m  ..  \033[0m ] $1"
}

user () {
  printf "\r    [ \033[0;33m  ?  \033[0m ] $1 "
}

success () {
  printf "\r\033[2K    [ \033[00;32m  OK  \033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K    [\033[0;31m  FAIL  \033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_git_submoules(){
    info 'Cloning & initialising git submodules'
    git submodule update --init --recursive --quiet
    success 'Done'
}

install_dotfiles () {
  backup_time_stamp=`date +%d-%m-%Y:%H%M`

  for source in `find $dotfiles_root -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      user "File already exists: $dest, what do you want to do? [s]kip, [o]verwrite, [b]ackup?"
      read -n 1 action

      case "$action" in
        o )
       	  overwrite=true;;
	  	b )
          backup=true;;
        s )
          skip=true;;
        * )
          ;;
      esac

      if [ "$overwrite" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ]
      then
        mv $dest $dest\.$backup_time_stamp
        success "backed up $dest to $dest.$backup_time_stamp"
      fi

      if [ "$skip" == "false" ]
      then
        #link_files $source $dest
        success "skipped $source"
      else
        success "skipped $source"
      fi

    else
        success "skipped $source"
      #link_files $source $dest
    fi

  done
}

echo -e '\n
      _               ___ _ _             
     | |       _     / __|_) |            
   __| | ___ _| |_ _| |__ _| | _____  ___ 
  / _  |/ _ (_   _|_   __) | || ___ |/___)
 ( (_| | |_| || |_  | |  | | || ____|___ |
(_)____|\___/  \__) |_|  |_|\_)_____|___/ 
                                          
'

#setup_gitconfig
#install_git_submoules
install_dotfiles

echo -e '\n'
echo -e '  All installed!'
echo -e '\n'


