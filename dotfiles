#!/usr/bin/env bash
#
# Based on a fork of the Bootstrap script from the
# holman/dotfiles (https://github.com/holman/dotfiles)
# repo.
#
# The dotfiles script installs, sets up and configures the
# various dotfiles and components in the dotfiles parent
# directory.
# - For Windows Vim, Copy the .dotfiles/Vim/ directory to /vimfiles and the .dotfiles/.vimrc to .vimrc both in the users root directory.

dotfiles_root=`pwd`

set -e

echo ''

info() 
{
  printf "    [ \033[00;34m  ..  \033[0m ] $1"
}

user() 
{
  printf "\r    [ \033[0;33m  ?  \033[0m ] $1 "
}

success() 
{
  printf "\r\033[2K    [ \033[00;32m  OK  \033[0m ] $1\n"
}

fail() 
{
  printf "\r\033[2K    [\033[0;31m  FAIL  \033[0m] $1\n"
  echo ''
  exit
}

std_stream()
{
	echo -e " $1"
}

link_files() 
{
  ln -s $1 $2
  success "linked $1 to $2"
}

setup_gitconfig() 
{
  if test -e ~/.gitcredentials.config
  then
      success '.gitconfig Credentials Initialised, Nothing To Do.'
  else
      info 'Setting Up .gitconfig'
  
      user ' - What Is Your Git Autor Name?'
      read -e git_authorname
  
      user ' - What Is Your Git Author Email Address?'
      read -e git_authoremail
  
      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g"  git/gitcredentials.template > ~/.gitcredentials.config
  
      success  'Setting Up .gitconfig'
  fi
}

install_git_submoules(){
    info 'Cloning & initialising git submodules'
    git submodule update --init --recursive --quiet
    success 'Done'
}

usage () 
{
	std_stream "This application installs and configures the dotfiles from https://github.com/andy-crouch/dotfiles."
	std_stream "\n Full details of how this application works and the command line options can be found in the above repository."
	std_stream "\n Usage: dotfles <operation>"
	std_stream "       dotfiles (-i --install)        - Installs and links the dotfiles to the local file system."
	std_stream "       dotfiles (-u --update)         - Updates the repository and any installed sub modules."
	std_stream "       dotfiles (-m --modules-update) - Updates installed sub modules only (not core repository files)."
	std_stream "\n"
}

set_environment_appearance()
{
	nitrogen --set-scaled ~/.dotfiles/background/Looking-For-Alaska.jpg
}

install_dotfiles () {
  backup_time_stamp=`date +%d-%m-%Y:%H%M`

  for source in `find $dotfiles_root -maxdepth 5 -name \*.symlink`
  do
#	target_path="$HOME/${source#$dotfiles_root/}"
	target_path="/home/andy/TestHome/${source#$dotfiles_root/}"
	target_dir=$(dirname "${target_path}")
	file_name="`basename \"${source%.*}\"`"

	dest="$target_dir/$file_name"
	
	if [ -f $source ] && [ ! -d "${target_dir}" ]
	then
		mkdir -p $target_dir
	fi

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      user "File already exists: $dest, what do you want to do? [s]kip, [o]verwrite, [b]ackup?"
      read -n 1 action

      case "$action" in
        o )
       	overwrite=true;;
	  	b )
          backup=true;;
        s )
          skip=true;;
        * )
          ;;
      esac

      if [ "$overwrite" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ]
      then
        mv $dest $dest\.$backup_time_stamp
        success "backed up $dest to $dest.$backup_time_stamp"
      fi

      if [ "$skip" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

echo -e '\n
      _               ___ _ _             
     | |       _     / __|_) |            
   __| | ___ _| |_ _| |__ _| | _____  ___ 
  / _  |/ _ (_   _|_   __) | || ___ |/___)
 ( (_| | |_| || |_  | |  | | || ____|___ |
(_)____|\___/  \__) |_|  |_|\_)_____|___/ 
                                          
'

while [ "$1" != "" ]; do
    case $1 in
        -i | --install )           
			setup_gitconfig
			set_environment_appearance
			install_dotfiles
			shift
			echo -e "Installing"
			;;
        -u | --update )    
			setup_gitconfig
			set_environment_appearance
			shift
			echo -e "Updating"
			;;
        -h | --help )           
			shift
			usage
			;;
        -m | --modules-update )           
			shift
			echo -e "Updating Sub Modules"
			;;
        * )                     
			shift
			usage
			;;
    esac
done

#install_git_submoules
#install_dotfiles

#echo -e '\n'
#echo -e '  All installed!'
#echo -e '\n'

