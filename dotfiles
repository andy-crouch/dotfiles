#!/usr/bin/env bash
#
# This script installs and helps to manage the settings and configurations in 
# the ~/.dotfiles directory.
# 
# This script was inspired by an original set up script found in the
# holman/dotfiles (https://github.com/holman/dotfiles) repo.
#
# Use dofiles -h (-help) for usage details.

echo -e '\n
      _               ___ _ _             
     | |       _     / __|_) |            
   __| | ___ _| |_ _| |__ _| | _____  ___ 
  / _  |/ _ (_   _|_   __) | || ___ |/___)
 ( (_| | |_| || |_  | |  | | || ____|___ |
(_)____|\___/  \__) |_|  |_|\_)_____|___/ 
\n                                          
'

# Set script options
set -e

# Set the expected root dotfile directory path
cd "$HOME/.dotfiles/" || exit
dotfiles_root=$(pwd)

# Define UI helpers
info() {
  printf "    [ \033[00;34m  ..  \033[0m ] %s " "$1"
}

user() {
  printf "\r    [ \033[0;33m  ?  \033[0m ] %s " "$1"
}

success() {
  printf "\r\033[2K    [ \033[00;32m  OK  \033[0m ] %s\n" "$1"
}

fail() {
  printf "\r\033[2K    [\033[0;31m  FAIL  \033[0m] %s\n" "$1"
  echo ''
  exit
}

# Define a function to create a soft symlink between the 
# source path ($1) and the destination path ($2)
link_files() {
  ln -s "$1" "$2"
  success "linked $1 to $2"
}

# Define a function to generate the users ~/.gitcredentials.config file.
# (This file is used to hold git secrets so they are not checked in to git)
setup_gitconfig() {
  if test -e ~/.gitcredentials.config
  then
      success '.gitconfig credentials initialised, Nothing to do.'
  else
      info 'Setting Up .gitconfig'
  
      user ' - What Is Your Git Author Name?'
      read -r -e git_authorname
  
      user ' - What Is Your Git Author Email Address?'
      read -r -e git_authoremail
  
      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g"  git/gitcredentials.template > ~/.gitcredentials.config
  
      success  'Setting up .gitconfig'
  fi
}

# Define a function to setup zsh.
# The function will check that zsh is an installed shell, attempt to switch to it 
# and if successful, run an unattended oh-my-zsh installation.
setup_zsh() {
  if [ -n "$(command -v zsh)" ]
  then
    info 'To attempt to configure zsh you will need to enter your sudo password. This is not stored.'
    sudo chsh -s "$(command -v zsh)"
    exit
    curl -Lo install.sh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
    sh install.sh --unattended
    rm install.sh

    success  'Zsh configured & Oh My Zsh installed.'
  else
    info 'zsh Is Not Installed, Set Up zsh Manually.'
  fi
}

# Define a function to output usage details & help
usage () {
  echo -e " The Dotfiles script installs and manages the settings & configuration files in your ~/.dotfiles directory."
  echo -e " \n Full details of how this script works and the command line options can be found at https://github.com/andy-crouch/dotfiles"
  echo -e " \n Usage: dotfiles <operation>"
  echo -e "        dotfiles (-i --install)        - Installs & links the dotfiles to the local file system (requires sudo)."
  echo -e "        dotfiles (-u --update)         - Updates the repository and any installed sub modules."
  echo -e "        dotfiles (-m --modules-update) - Updates installed sub modules only (not core repository files)."
  echo -e " \n"
}

# Define a function to map .symlink Dotfiles to their respective paths on the 
# file system
install_dotfiles () {
  backup_time_stamp=$(date +%d-%m-%Y:%H%M)

  find "$dotfiles_root" -maxdepth 5 -name \*.symlink |
  while read -r source
  do

  #  target_path="$HOME/${source#$dotfiles_root/}"
    target_path="/home/andy/TestHome/${source#$dotfiles_root/}"
    target_dir=$(dirname "${target_path}")
    file_name="$(basename "${source%.*}")"

    dest="$target_dir/$file_name"
	
    if [ -f "$source" ] && [ ! -d "${target_dir}" ]
    then
        mkdir -p "$target_dir"
    fi

    if [ -f "$dest" ] || [ -d "$dest" ]
    then

      overwrite=false
      backup=false
      skip=false

      user "File already exists: $dest, what do you want to do? [s]kip, [o]verwrite, [b]ackup?"
      read -r -n action

      case "$action" in
        o )
       	overwrite=true;;
	  	b )
          backup=true;;
        s )
          skip=true;;
        * )
          ;;
      esac

      if [ "$overwrite" == "true" ]
      then
        rm -rf "$dest"
        success "removed $dest"
      fi

      if [ "$backup" == "true" ]
      then
        mv "$dest" "$dest\.$backup_time_stamp"
        success "backed up $dest to $dest.$backup_time_stamp"
      fi

      if [ "$skip" == "false" ]
      then
        link_files "$source" "$dest"
      else
        success "skipped $source"
      fi

    else
      link_files "$source" "$dest"
    fi

  done
}

# Process command line arguments
if [ $# -lt 1 ] ; then
    usage
fi

if [ "$1" != "" ]
then
  case $1 in
    -i | --install )           
      #if [ "$EUID" -ne 0 ]
      #  then echo "Unable To Install Dotfiles When Script Is Not Run As Sudo"
      #  exit
      #fi
      setup_gitconfig
      setup_zsh
      install_dotfiles
      shift
      echo -e ""
      ;;
    -u | --update )    
      shift
      echo -e "Updating"
      ;;
    -h | --help )           
      shift
      usage
      ;;
    -m | --modules-update )           
      shift
      echo -e "Updating Sub Modules"
      ;;
    * )                     
      shift
      usage
      ;;
  esac
fi



#install_git_submoules
#install_dotfiles

#echo -e '\n'
#echo -e '  All installed!'
#echo -e '\n'

#install_git_submoules() {
#  info 'Cloning & initialising git submodules'
#  git submodule update --init --recursive --quiet
#  success 'Done'
#}

#
# - For Windows Vim, Copy the .dotfiles/Vim/ directory to /vimfiles and the .dotfiles/.vimrc to .vimrc both in the users root directory.

